// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nanuvem.irealizze.modelo.perene;

import com.nanuvem.irealizze.modelo.perene.Item;
import com.nanuvem.irealizze.modelo.perene.ItemDataOnDemand;
import com.nanuvem.irealizze.modelo.perene.Preco;
import com.nanuvem.irealizze.modelo.perene.PrecoDataOnDemand;
import com.nanuvem.irealizze.modelo.perene.TabelaPreco;
import com.nanuvem.irealizze.modelo.perene.TabelaPrecoDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PrecoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PrecoDataOnDemand: @Component;
    
    private Random PrecoDataOnDemand.rnd = new SecureRandom();
    
    private List<Preco> PrecoDataOnDemand.data;
    
    @Autowired
    ItemDataOnDemand PrecoDataOnDemand.itemDataOnDemand;
    
    @Autowired
    TabelaPrecoDataOnDemand PrecoDataOnDemand.tabelaPrecoDataOnDemand;
    
    public Preco PrecoDataOnDemand.getNewTransientPreco(int index) {
        Preco obj = new Preco();
        setItem(obj, index);
        setTabela(obj, index);
        setValorUnitario(obj, index);
        return obj;
    }
    
    public void PrecoDataOnDemand.setItem(Preco obj, int index) {
        Item item = itemDataOnDemand.getRandomItem();
        obj.setItem(item);
    }
    
    public void PrecoDataOnDemand.setTabela(Preco obj, int index) {
        TabelaPreco tabela = tabelaPrecoDataOnDemand.getRandomTabelaPreco();
        obj.setTabela(tabela);
    }
    
    public void PrecoDataOnDemand.setValorUnitario(Preco obj, int index) {
        double valorUnitario = new Integer(index).doubleValue();
        obj.setValorUnitario(valorUnitario);
    }
    
    public Preco PrecoDataOnDemand.getSpecificPreco(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Preco obj = data.get(index);
        Long id = obj.getId();
        return Preco.findPreco(id);
    }
    
    public Preco PrecoDataOnDemand.getRandomPreco() {
        init();
        Preco obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Preco.findPreco(id);
    }
    
    public boolean PrecoDataOnDemand.modifyPreco(Preco obj) {
        return false;
    }
    
    public void PrecoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Preco.findPrecoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Preco' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Preco>();
        for (int i = 0; i < 10; i++) {
            Preco obj = getNewTransientPreco(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}

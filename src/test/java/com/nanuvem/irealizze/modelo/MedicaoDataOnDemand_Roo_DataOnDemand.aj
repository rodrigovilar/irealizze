// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nanuvem.irealizze.modelo;

import com.nanuvem.irealizze.modelo.Alocacao;
import com.nanuvem.irealizze.modelo.AlocacaoDataOnDemand;
import com.nanuvem.irealizze.modelo.ElementoFolha;
import com.nanuvem.irealizze.modelo.ElementoFolhaDataOnDemand;
import com.nanuvem.irealizze.modelo.Medicao;
import com.nanuvem.irealizze.modelo.MedicaoDataOnDemand;
import com.nanuvem.irealizze.modelo.Periodo;
import com.nanuvem.irealizze.modelo.PeriodoDataOnDemand;
import com.nanuvem.irealizze.modelo.TipoMedicao;
import com.nanuvem.irealizze.modelo.perene.Preco;
import com.nanuvem.irealizze.modelo.perene.PrecoDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MedicaoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MedicaoDataOnDemand: @Component;
    
    private Random MedicaoDataOnDemand.rnd = new SecureRandom();
    
    private List<Medicao> MedicaoDataOnDemand.data;
    
    @Autowired
    AlocacaoDataOnDemand MedicaoDataOnDemand.alocacaoDataOnDemand;
    
    @Autowired
    ElementoFolhaDataOnDemand MedicaoDataOnDemand.elementoFolhaDataOnDemand;
    
    @Autowired
    PeriodoDataOnDemand MedicaoDataOnDemand.periodoDataOnDemand;
    
    @Autowired
    PrecoDataOnDemand MedicaoDataOnDemand.precoDataOnDemand;
    
    public Medicao MedicaoDataOnDemand.getNewTransientMedicao(int index) {
        Medicao obj = new Medicao();
        setAlocacao(obj, index);
        setElementoFolha(obj, index);
        setPeriodo(obj, index);
        setPreco(obj, index);
        setQuantidade(obj, index);
        setTipo(obj, index);
        return obj;
    }
    
    public void MedicaoDataOnDemand.setAlocacao(Medicao obj, int index) {
        Alocacao alocacao = alocacaoDataOnDemand.getRandomAlocacao();
        obj.setAlocacao(alocacao);
    }
    
    public void MedicaoDataOnDemand.setElementoFolha(Medicao obj, int index) {
        ElementoFolha elementoFolha = elementoFolhaDataOnDemand.getRandomElementoFolha();
        obj.setElementoFolha(elementoFolha);
    }
    
    public void MedicaoDataOnDemand.setPeriodo(Medicao obj, int index) {
        Periodo periodo = periodoDataOnDemand.getRandomPeriodo();
        obj.setPeriodo(periodo);
    }
    
    public void MedicaoDataOnDemand.setPreco(Medicao obj, int index) {
        Preco preco = precoDataOnDemand.getRandomPreco();
        obj.setPreco(preco);
    }
    
    public void MedicaoDataOnDemand.setQuantidade(Medicao obj, int index) {
        double quantidade = new Integer(index).doubleValue();
        obj.setQuantidade(quantidade);
    }
    
    public void MedicaoDataOnDemand.setTipo(Medicao obj, int index) {
        TipoMedicao tipo = TipoMedicao.class.getEnumConstants()[0];
        obj.setTipo(tipo);
    }
    
    public Medicao MedicaoDataOnDemand.getSpecificMedicao(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Medicao obj = data.get(index);
        Long id = obj.getId();
        return Medicao.findMedicao(id);
    }
    
    public Medicao MedicaoDataOnDemand.getRandomMedicao() {
        init();
        Medicao obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Medicao.findMedicao(id);
    }
    
    public boolean MedicaoDataOnDemand.modifyMedicao(Medicao obj) {
        return false;
    }
    
    public void MedicaoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Medicao.findMedicaoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Medicao' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Medicao>();
        for (int i = 0; i < 10; i++) {
            Medicao obj = getNewTransientMedicao(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}

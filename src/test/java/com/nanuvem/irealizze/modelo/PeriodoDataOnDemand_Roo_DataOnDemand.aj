// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nanuvem.irealizze.modelo;

import com.nanuvem.irealizze.modelo.Periodo;
import com.nanuvem.irealizze.modelo.PeriodoDataOnDemand;
import com.nanuvem.irealizze.modelo.Projeto;
import com.nanuvem.irealizze.modelo.ProjetoDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PeriodoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PeriodoDataOnDemand: @Component;
    
    private Random PeriodoDataOnDemand.rnd = new SecureRandom();
    
    private List<Periodo> PeriodoDataOnDemand.data;
    
    @Autowired
    ProjetoDataOnDemand PeriodoDataOnDemand.projetoDataOnDemand;
    
    public Periodo PeriodoDataOnDemand.getNewTransientPeriodo(int index) {
        Periodo obj = new Periodo();
        setDataLimite(obj, index);
        setProjeto(obj, index);
        return obj;
    }
    
    public void PeriodoDataOnDemand.setDataLimite(Periodo obj, int index) {
        Calendar dataLimite = Calendar.getInstance();
        obj.setDataLimite(dataLimite);
    }
    
    public void PeriodoDataOnDemand.setProjeto(Periodo obj, int index) {
        Projeto projeto = projetoDataOnDemand.getRandomProjeto();
        obj.setProjeto(projeto);
    }
    
    public Periodo PeriodoDataOnDemand.getSpecificPeriodo(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Periodo obj = data.get(index);
        Long id = obj.getId();
        return Periodo.findPeriodo(id);
    }
    
    public Periodo PeriodoDataOnDemand.getRandomPeriodo() {
        init();
        Periodo obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Periodo.findPeriodo(id);
    }
    
    public boolean PeriodoDataOnDemand.modifyPeriodo(Periodo obj) {
        return false;
    }
    
    public void PeriodoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Periodo.findPeriodoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Periodo' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Periodo>();
        for (int i = 0; i < 10; i++) {
            Periodo obj = getNewTransientPeriodo(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
